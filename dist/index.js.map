{"version":3,"sources":["/Users/Justa/Desktop/iota-projects/virtue/virtue-sdk/dist/index.js","../src/client.ts","../src/constants/coin.ts","../src/constants/object.ts","../src/types/coin.ts","../src/utils/format.ts","../src/utils/object.ts","../src/utils/response.ts"],"names":["getCoinSymbol","collector"],"mappings":"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IAAA;AACK,IAAA;AACD,IAAA;AACL,IAAA;AACF,EAAA;AAAA;AAAA;AAAA;AAKA,EAAA;AAIQ,IAAA;AACD,IAAA;AACA,IAAA;AACA,IAAA;AACC,IAAA;AACA,IAAA;AACJ,MAAA;AACF,IAAA;AACM,IAAA;AACA,IAAA;AACJ,MAAA;AACF,IAAA;AACK,IAAA;AACH,MAAA;AACE,QAAA;AACA,QAAA;AACA,QAAA;AACE,UAAA;AACA,UAAA;AACA,UAAA;AACA,UAAA;AACA,UAAA;AACF,QAAA;AACD,MAAA;AACD,MAAA;AACD,IAAA;AACK,IAAA;AACD,IAAA;AACL,IAAA;AACF,EAAA;AAAA;AAAA;AAAA;AAKA,EAAA;AAGO,IAAA;AACA,IAAA;AACA,IAAA;AACC,IAAA;AACD,IAAA;AACL,IAAA;AACF,EAAA;AAAA;AAAA;AAAA;AAKA,EAAA;AAIO,IAAA;AACH,MAAA;AACA,MAAA;AACA,MAAA;AACE,QAAA;AACE,UAAA;AACF,QAAA;AACA,QAAA;AACE,UAAA;AACF,QAAA;AACA,QAAA;AACE,UAAA;AACF,QAAA;AACA,QAAA;AACA,QAAA;AACF,MAAA;AACD,IAAA;AACH,EAAA;AACF;ADgLU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/Justa/Desktop/iota-projects/virtue/virtue-sdk/dist/index.js","sourcesContent":[null,"import {\n  Transaction,\n  TransactionArgument,\n  TransactionResult,\n} from \"@iota/iota-sdk/transactions\";\nimport { getFullnodeUrl, IotaClient } from \"@iota/iota-sdk/client\";\n\nimport { COIN_TYPES, CONFIG, ConfigType } from \"@/constants\";\nimport {\n  VaultInfo,\n  VaultResponse,\n  COLLATERAL_COIN,\n  PositionInfo,\n  VaultInfoList,\n  COIN,\n  StabilityPoolInfo,\n  StabilityPoolBalances,\n  Rewards,\n  isDepositPointBonusCoin,\n  DEPOSIT_POINT_BONUS_COIN,\n} from \"@/types\";\nimport { getObjectFields, parseVaultObject } from \"@/utils\";\nimport {\n  IotaPriceServiceConnection,\n  IotaPythClient,\n} from \"@pythnetwork/pyth-iota-js\";\nimport { bcs } from \"@iota/iota-sdk/bcs\";\nimport { isValidIotaAddress } from \"@iota/iota-sdk/utils\";\n\nconst getCoinSymbol = (coinType: string) => {\n  const coin = Object.keys(COIN_TYPES).find(\n    (key) => COIN_TYPES[key as COIN] === coinType,\n  );\n  if (coin) {\n    return coin as COIN;\n  }\n  return undefined;\n};\n\nexport class VirtueClient {\n  /**\n   * @description a TS wrapper over Virtue CDP client.\n   * @param network connection to fullnode: 'mainnet' | 'testnet'\n   * @param owner (optional) address of the current user (default: DUMMY_ADDRESS)\n   */\n  private rpcEndpoint: string;\n  private iotaClient: IotaClient;\n  private pythConnection: IotaPriceServiceConnection;\n  private pythClient: IotaPythClient;\n  public transaction: Transaction;\n  public sender: string;\n  public config: ConfigType;\n\n  constructor(inputs: {\n    network?: \"mainnet\" | \"testnet\";\n    rpcUrl?: string;\n    sender: string;\n  }) {\n    const { network, rpcUrl, sender } = inputs;\n    this.config = CONFIG[network ?? \"mainnet\"];\n    this.rpcEndpoint = rpcUrl ?? getFullnodeUrl(network ?? \"mainnet\");\n    if (!isValidIotaAddress(sender)) {\n      throw new Error(\"Invalid sender address\");\n    }\n    this.sender = sender;\n    this.iotaClient = new IotaClient({ url: this.rpcEndpoint });\n    this.pythConnection = new IotaPriceServiceConnection(\n      \"https://hermes.pyth.network\",\n    );\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    this.pythClient = new IotaPythClient(\n      this.iotaClient as any,\n      this.config.PYTH_STATE_ID,\n      this.config.WORMHOLE_STATE_ID,\n    );\n    this.transaction = new Transaction();\n  }\n\n  /* ----- Getter ----- */\n\n  /**\n   * @description Get this.iotaClient\n   */\n  getIotaClient(): IotaClient {\n    return this.iotaClient;\n  }\n\n  /**\n   * @description Get this.pythConnection\n   */\n  getPythConnection(): IotaPriceServiceConnection {\n    return this.pythConnection;\n  }\n\n  /**\n   * @description Get this.pythClient\n   */\n  getPythClient(): IotaPythClient {\n    return this.pythClient;\n  }\n\n  /* ----- Query ----- */\n\n  /**\n   * @description Get all vault objects\n   */\n  async getAllVaults(): Promise<VaultInfoList> {\n    // Get objectId from VAULT_MAP and get all vaults\n    const vaultObjectIds = Object.values(this.config.VAULT_MAP).map(\n      (v) => v.vault.objectId,\n    );\n    const vaultResults = await this.iotaClient.multiGetObjects({\n      ids: vaultObjectIds,\n      options: {\n        showContent: true,\n      },\n    });\n\n    const vaults: VaultInfoList = vaultResults.reduce((acc, res) => {\n      const fields = getObjectFields(res) as VaultResponse;\n      const token = Object.keys(this.config.VAULT_MAP).find(\n        (key) =>\n          this.config.VAULT_MAP[key as COLLATERAL_COIN].vault.objectId ===\n          res.data?.objectId,\n      );\n      if (!token) return acc;\n\n      const vault = parseVaultObject(token as COLLATERAL_COIN, fields);\n      acc[vault.token] = vault;\n      return acc;\n    }, {} as VaultInfoList);\n\n    return vaults;\n  }\n\n  /**\n   * @description Get Vault<token> object\n   */\n  async getVault(token: COLLATERAL_COIN): Promise<VaultInfo> {\n    const res = await this.iotaClient.getObject({\n      id: this.config.VAULT_MAP[token].vault.objectId,\n      options: {\n        showContent: true,\n      },\n    });\n    const fields = getObjectFields(res) as VaultResponse;\n\n    return parseVaultObject(token, fields);\n  }\n\n  /**\n   * @description Get debtor's position data\n   */\n  async getDebtorPositions(debtor?: string): Promise<PositionInfo[]> {\n    const tx = new Transaction();\n    const clockObj = tx.sharedObjectRef(this.config.CLOCK_OBJ);\n    const tokenList = Object.keys(this.config.VAULT_MAP) as COLLATERAL_COIN[];\n    const debtorAddr = debtor ?? this.sender;\n    if (!isValidIotaAddress(debtorAddr)) {\n      throw new Error(\"Invalid debtor address\");\n    }\n    tokenList.map((token) => {\n      tx.moveCall({\n        target: `${this.config.CDP_PACKAGE_ID}::vault::try_get_position_data`,\n        typeArguments: [COIN_TYPES[token]],\n        arguments: [\n          tx.sharedObjectRef(this.config.VAULT_MAP[token].vault),\n          tx.pure.address(debtorAddr),\n          clockObj,\n        ],\n      });\n    });\n\n    const res = await this.iotaClient.devInspectTransactionBlock({\n      transactionBlock: tx,\n      sender: debtor ?? this.sender,\n    });\n    if (!res.results) return [];\n\n    return res.results.map((value, idx) => {\n      const collateral = tokenList[idx];\n      if (value.returnValues) {\n        const [collReturn, debtReturn] = value.returnValues;\n        return {\n          collateral,\n          collAmount: collReturn\n            ? bcs.u64().parse(Uint8Array.from(collReturn[0]))\n            : \"0\",\n          debtAmount: debtReturn\n            ? bcs.u64().parse(Uint8Array.from(debtReturn[0]))\n            : \"0\",\n        };\n      } else {\n        return {\n          collateral: tokenList[idx],\n          collAmount: \"0\",\n          debtAmount: \"0\",\n        };\n      }\n    });\n  }\n\n  /**\n   * @description Get data from stability pool\n   */\n  async getStabilityPool(): Promise<StabilityPoolInfo> {\n    const res = await this.iotaClient.getObject({\n      id: this.config.STABILITY_POOL_OBJ.objectId,\n      options: {\n        showContent: true,\n      },\n    });\n    const fields = getObjectFields(res);\n\n    if (!fields) {\n      return { vusdBalance: 0 };\n    }\n\n    return { vusdBalance: fields.vusd_balance };\n  }\n\n  /**\n   * @description Get user's balances in stability pool\n   */\n  async getStabilityPoolBalances(\n    account?: string,\n  ): Promise<StabilityPoolBalances> {\n    const accountAddr = account ?? this.sender;\n    if (!isValidIotaAddress(accountAddr)) {\n      throw new Error(\"Invalid account address\");\n    }\n    const res = await this.iotaClient.getDynamicFieldObject({\n      parentId: this.config.STABILITY_POOL_TABLE_ID,\n      name: {\n        type: \"address\",\n        value: accountAddr,\n      },\n    });\n    const collBalances: Partial<Record<COLLATERAL_COIN, number>> = {};\n    Object.keys(this.config.VAULT_MAP).map((collSymbol) => {\n      collBalances[collSymbol as COLLATERAL_COIN] = 0;\n    });\n    if (res.data?.content?.dataType !== \"moveObject\") {\n      return { vusdBalance: 0, collBalances };\n    }\n    const fields = res.data.content.fields as any;\n\n    const vusdBalance =\n      fields.value.fields.value.fields.vusd_balance.fields.value;\n    const vecMap = fields.value.fields.value.fields.coll_balances.fields\n      .contents as any[];\n    vecMap.map((info) => {\n      const coinType = \"0x\" + info.fields.key.fields.name;\n      const coinSymbol = getCoinSymbol(coinType);\n      if (coinSymbol) {\n        const collBalance = info.fields.value.fields.value;\n        collBalances[coinSymbol as COLLATERAL_COIN] = +collBalance;\n      }\n    });\n    return { vusdBalance, collBalances };\n  }\n\n  /**\n   * @description Get reward amounts from borrow incentive program\n   */\n  async getBorrowRewards(\n    collateralSymbol: COLLATERAL_COIN,\n    account?: string,\n  ): Promise<Rewards> {\n    const accountAddr = account ?? this.sender;\n    if (!isValidIotaAddress(accountAddr)) {\n      throw new Error(\"Invalid debtor address\");\n    }\n    const tx = new Transaction();\n    const vaultInfo = this.config.VAULT_MAP[collateralSymbol];\n    const rewarders = vaultInfo.rewarders;\n    const vaultObj = tx.sharedObjectRef(vaultInfo.vault);\n    if (!rewarders) return {};\n    rewarders.map((rewarder) => {\n      tx.moveCall({\n        target: `${this.config.INCENTIVE_PACKAGE_ID}::borrow_incentive::realtime_reward_amount`,\n        typeArguments: [\n          COIN_TYPES[collateralSymbol],\n          COIN_TYPES[rewarder.rewardSymbol],\n        ],\n        arguments: [\n          tx.sharedObjectRef(rewarder),\n          vaultObj,\n          tx.pure.address(accountAddr),\n          tx.sharedObjectRef(this.config.CLOCK_OBJ),\n        ],\n      });\n    });\n    const res = await this.iotaClient.devInspectTransactionBlock({\n      transactionBlock: tx,\n      sender: accountAddr,\n    });\n    if (!res.results) return {};\n    const rewards: Rewards = {};\n    res.results.map((value, idx) => {\n      const rewarder = rewarders[idx];\n      if (rewarder && value.returnValues) {\n        const [rewardAmount] = value.returnValues;\n        rewards[rewarder.rewardSymbol] = Number(\n          rewardAmount\n            ? bcs.u64().parse(Uint8Array.from(rewardAmount[0]))\n            : \"0\",\n        );\n      }\n    });\n    return rewards;\n  }\n\n  /**\n   * @description Get reward amounts from stability pool incentive program\n   */\n  async getStabilityPoolRewards(account?: string): Promise<Rewards> {\n    const tx = new Transaction();\n    const accountAddr = account ?? this.sender;\n    if (!isValidIotaAddress(accountAddr)) {\n      throw new Error(\"Invalid debtor address\");\n    }\n\n    this.config.STABILITY_POOL_REWARDERS.map((rewarder) => {\n      tx.moveCall({\n        target: `${this.config.INCENTIVE_PACKAGE_ID}::stability_pool_incentive::realtime_reward_amount`,\n        typeArguments: [COIN_TYPES[rewarder.rewardSymbol]],\n        arguments: [\n          tx.sharedObjectRef(rewarder),\n          tx.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n          tx.pure.address(accountAddr),\n          tx.sharedObjectRef(this.config.CLOCK_OBJ),\n        ],\n      });\n    });\n    const res = await this.iotaClient.devInspectTransactionBlock({\n      transactionBlock: tx,\n      sender: accountAddr,\n    });\n    if (!res.results) return {};\n\n    const rewards: Rewards = {};\n    res.results.map((value, idx) => {\n      const rewarder = this.config.STABILITY_POOL_REWARDERS[idx];\n      if (rewarder && value.returnValues) {\n        const [rewardAmount] = value.returnValues;\n        rewards[rewarder.rewardSymbol] = Number(\n          rewardAmount\n            ? bcs.u64().parse(Uint8Array.from(rewardAmount[0]))\n            : \"0\",\n        );\n      }\n    });\n    return rewards;\n  }\n\n  /* ----- Transaction Utils ----- */\n\n  /**\n   * @description new zero coin\n   */\n  zeroCoin(coinSymbol: COIN): TransactionResult {\n    return this.transaction.moveCall({\n      target: \"0x2::coin::zero\",\n      typeArguments: [COIN_TYPES[coinSymbol]],\n    });\n  }\n\n  /**\n   * @description split the needed coins\n   */\n  async splitInputCoins(\n    coinSymbol: COIN,\n    ...amounts: (string | TransactionArgument)[]\n  ): Promise<TransactionResult> {\n    const totalAmount = amounts.reduce(\n      (sum, amount) => sum + Number(amount),\n      0,\n    );\n    if (totalAmount === 0) {\n      return this.zeroCoin(coinSymbol);\n    } else {\n      if (coinSymbol === \"IOTA\") {\n        return this.transaction.splitCoins(\n          this.transaction.gas,\n          amounts.map((amount) =>\n            typeof amount === \"string\"\n              ? this.transaction.pure.u64(amount)\n              : amount,\n          ),\n        );\n      } else {\n        const coinType = COIN_TYPES[coinSymbol];\n        const { data: userCoins } = await this.iotaClient.getCoins({\n          owner: this.sender,\n          coinType,\n        });\n        const [mainCoin, ...otherCoins] = userCoins.map((coin) =>\n          this.transaction.objectRef({\n            objectId: coin.coinObjectId,\n            version: coin.version,\n            digest: coin.digest,\n          }),\n        );\n        if (!mainCoin) {\n          throw new Error(\"Not enough balance\");\n        }\n\n        const ifMerge = otherCoins.length > 0;\n\n        if (ifMerge) {\n          this.transaction.mergeCoins(mainCoin, otherCoins);\n        }\n\n        const out = this.transaction.splitCoins(\n          mainCoin,\n          amounts.map((amount) =>\n            typeof amount === \"string\"\n              ? this.transaction.pure.u64(amount)\n              : amount,\n          ),\n        );\n\n        if (ifMerge) {\n          this.transaction.transferObjects([mainCoin], this.sender);\n        }\n\n        return out;\n      }\n    }\n  }\n\n  /* ----- Transaction Methods ----- */\n\n  /**\n   * @description Reset this.transaction\n   */\n  resetTransaction() {\n    this.transaction = new Transaction();\n  }\n\n  /**\n   * @description return Transaction\n   * @returns Transaction\n   */\n  getTransaction(): Transaction {\n    return this.transaction;\n  }\n\n  /**\n   * @description Create a AccountRequest\n   * @param accountObj (optional): Account object or EOA if undefined\n   * @return [AccountRequest]\n   */\n  newAccountRequest(\n    accountObj?: string | TransactionArgument,\n  ): TransactionResult {\n    return accountObj\n      ? this.transaction.moveCall({\n          target: `${this.config.FRAMEWORK_PACKAGE_ID}::account::request_with_account`,\n          arguments: [\n            typeof accountObj === \"string\"\n              ? this.transaction.object(accountObj)\n              : accountObj,\n          ],\n        })\n      : this.transaction.moveCall({\n          target: `${this.config.FRAMEWORK_PACKAGE_ID}::account::request`,\n        });\n  }\n\n  /**\n   * @description Create a price collector\n   * @param collateral coin symbol, e.g \"IOTA\"\n   * @return [PriceCollector]\n   */\n  newPriceCollector(collateralSymbol: COLLATERAL_COIN): TransactionResult {\n    return this.transaction.moveCall({\n      target: `${this.config.ORACLE_PACKAGE_ID}::collector::new`,\n      typeArguments: [COIN_TYPES[collateralSymbol]],\n    });\n  }\n\n  /**\n   * @description Get a price result\n   * @param collateral coin symbol, e.g \"IOTA\"\n   * @return [PriceResult]\n   */\n  async aggregatePrice(\n    collateralSymbol: COLLATERAL_COIN,\n  ): Promise<TransactionResult> {\n    const [collector] = this.newPriceCollector(collateralSymbol);\n    const coinType = COIN_TYPES[collateralSymbol];\n    const vaultInfo = this.config.VAULT_MAP[collateralSymbol];\n    if (vaultInfo.pythPriceId) {\n      const updateData = await this.pythConnection.getPriceFeedsUpdateData([\n        vaultInfo.pythPriceId,\n      ]);\n      const [priceInfoObjId] = await this.pythClient.updatePriceFeeds(\n        this.transaction as any,\n        updateData,\n        [vaultInfo.pythPriceId],\n      );\n      this.transaction.moveCall({\n        target: `${this.config.PYTH_RULE_PACKAGE_ID}::pyth_rule::feed`,\n        typeArguments: [coinType],\n        arguments: [\n          collector,\n          this.transaction.sharedObjectRef(this.config.PYTH_RULE_CONFIG_OBJ),\n          this.transaction.sharedObjectRef(this.config.CLOCK_OBJ),\n          this.transaction.object(this.config.PYTH_STATE_ID),\n          this.transaction.object(priceInfoObjId),\n        ],\n      });\n      return this.transaction.moveCall({\n        target: `${this.config.ORACLE_PACKAGE_ID}::aggregater::aggregate`,\n        typeArguments: [coinType],\n        arguments: [\n          this.transaction.sharedObjectRef(vaultInfo.priceAggregater),\n          collector,\n        ],\n      });\n    } else if (collateralSymbol === \"stIOTA\") {\n      const [collector] = this.newPriceCollector(\"stIOTA\");\n      const [iotaPriceResult] = await this.aggregatePrice(\"IOTA\");\n      this.transaction.moveCall({\n        target: `${this.config.CERT_RULE_PACKAGE_ID}::cert_rule::feed`,\n        arguments: [\n          collector,\n          iotaPriceResult,\n          this.transaction.sharedObjectRef(this.config.CERT_NATIVE_POOL_OBJ),\n          this.transaction.sharedObjectRef(this.config.CERT_METADATA_OBJ),\n        ],\n      });\n      return this.transaction.moveCall({\n        target: `${this.config.ORACLE_PACKAGE_ID}::aggregater::aggregate`,\n        typeArguments: [COIN_TYPES.stIOTA],\n        arguments: [\n          this.transaction.sharedObjectRef(vaultInfo.priceAggregater),\n          collector,\n        ],\n      });\n    } else {\n      return this.aggregatePrice(\"IOTA\");\n    }\n  }\n\n  /**\n   * @description Get a request to Mange Position\n   * @param collateralSymbol: collateral coin symbol , e.g \"IOTA\"\n   * @param depositCoin: collateral input coin\n   * @param borrowAmount: the amount to borrow\n   * @param repaymentCoin: repyment input coin (always VUSD)\n   * @param withdrawAmount: the amount to withdraw\n   * @param accountObj (optional): account object id or transaction argument\n   * @returns [UpdateRequest]\n   */\n  debtorRequest(inputs: {\n    collateralSymbol: COLLATERAL_COIN;\n    depositCoin: TransactionArgument;\n    borrowAmount: string | TransactionArgument;\n    repaymentCoin: TransactionArgument;\n    withdrawAmount: string | TransactionArgument;\n    accountObj?: string | TransactionArgument;\n  }): TransactionResult {\n    const {\n      collateralSymbol,\n      depositCoin,\n      borrowAmount,\n      repaymentCoin,\n      withdrawAmount,\n      accountObj,\n    } = inputs;\n    const coinType = COIN_TYPES[collateralSymbol];\n    const vaultId = this.config.VAULT_MAP[collateralSymbol].vault.objectId;\n    const [accountReq] = this.newAccountRequest(accountObj);\n    return this.transaction.moveCall({\n      target: `${this.config.CDP_PACKAGE_ID}::request::debtor_request`,\n      typeArguments: [coinType],\n      arguments: [\n        accountReq,\n        this.transaction.sharedObjectRef(this.config.TREASURY_OBJ),\n        this.transaction.pure.id(vaultId),\n        depositCoin,\n        typeof borrowAmount === \"string\"\n          ? this.transaction.pure.u64(borrowAmount)\n          : borrowAmount,\n        repaymentCoin,\n        typeof withdrawAmount === \"string\"\n          ? this.transaction.pure.u64(withdrawAmount)\n          : withdrawAmount,\n      ],\n    });\n  }\n\n  /**\n   * @description Manage Position\n   * @param collateralSymbol: collateral coin symbol , e.g \"IOTA\"\n   * @param updateRequest: manager request, ex: see this.debtorRequest\n   * @param priceResult: price result, see this.aggregatePrice\n   * @returns [Coin<T>, COIN<VUSD>]\n   */\n  updatePosition(inputs: {\n    collateralSymbol: COLLATERAL_COIN;\n    updateRequest: TransactionArgument;\n    priceResult?: TransactionArgument;\n  }): TransactionResult {\n    const { collateralSymbol, updateRequest, priceResult } = inputs;\n    const vault = this.config.VAULT_MAP[collateralSymbol].vault;\n    const priceResultType = `${this.config.ORIGINAL_ORACLE_PACKAGE_ID}::result::PriceResult<${COIN_TYPES[collateralSymbol]}>`;\n    const priceResultOpt = priceResult\n      ? this.transaction.moveCall({\n          target: `0x1::option::some`,\n          typeArguments: [priceResultType],\n          arguments: [priceResult],\n        })\n      : this.transaction.moveCall({\n          target: `0x1::option::none`,\n          typeArguments: [priceResultType],\n        });\n    return this.transaction.moveCall({\n      target: `${this.config.CDP_PACKAGE_ID}::vault::update_position`,\n      typeArguments: [COIN_TYPES[collateralSymbol]],\n      arguments: [\n        this.transaction.sharedObjectRef(vault),\n        this.transaction.sharedObjectRef(this.config.TREASURY_OBJ),\n        this.transaction.sharedObjectRef(this.config.CLOCK_OBJ),\n        priceResultOpt,\n        updateRequest,\n      ],\n    });\n  }\n\n  /**\n   * @description check and destroy UpdateResponse\n   * @param collateralSymbol: \"IOTA\" or \"stIOTA\"\n   * @param response: UpdateResponse generated by update_position\n   */\n  checkResponse(inputs: {\n    collateralSymbol: COLLATERAL_COIN;\n    response: TransactionArgument;\n  }) {\n    const { collateralSymbol, response } = inputs;\n    let updateResponse = response;\n    const vault = this.config.VAULT_MAP[collateralSymbol].vault;\n    const vaultObj = this.transaction.sharedObjectRef(vault);\n    const collateralType = COIN_TYPES[collateralSymbol];\n    const rewarders = this.config.VAULT_MAP[collateralSymbol].rewarders;\n    const globalConfigObj = this.transaction.sharedObjectRef(\n      this.config.INCENTIVE_GLOBAL_CONFIG_OBJ,\n    );\n    const registryObj = this.transaction.sharedObjectRef(\n      this.config.VAULT_REWARDER_REGISTRY_OBJ,\n    );\n    const clockObj = this.transaction.sharedObjectRef(this.config.CLOCK_OBJ);\n    const checker = this.transaction.moveCall({\n      target: `${this.config.INCENTIVE_PACKAGE_ID}::borrow_incentive::new_checker`,\n      typeArguments: [collateralType],\n      arguments: [registryObj, globalConfigObj, updateResponse],\n    });\n    (rewarders ?? []).map((rewarder) => {\n      const rewardType = COIN_TYPES[rewarder.rewardSymbol];\n      this.transaction.moveCall({\n        target: `${this.config.INCENTIVE_PACKAGE_ID}::borrow_incentive::update`,\n        typeArguments: [collateralType, rewardType],\n        arguments: [\n          checker,\n          globalConfigObj,\n          vaultObj,\n          this.transaction.sharedObjectRef(rewarder),\n          clockObj,\n        ],\n      });\n    });\n    const [responseAfterIncentive] = this.transaction.moveCall({\n      target: `${this.config.INCENTIVE_PACKAGE_ID}::borrow_incentive::destroy_checker`,\n      typeArguments: [collateralType],\n      arguments: [checker, globalConfigObj],\n    });\n    updateResponse = responseAfterIncentive;\n    this.transaction.moveCall({\n      target: `${this.config.CDP_PACKAGE_ID}::vault::destroy_response`,\n      typeArguments: [COIN_TYPES[collateralSymbol]],\n      arguments: [\n        vaultObj,\n        this.transaction.sharedObjectRef(this.config.TREASURY_OBJ),\n        updateResponse,\n      ],\n    });\n  }\n\n  /**\n   * @description deposit to stability pool\n   * @param vusdCoin: coin of VUSD\n   * @param recipient (optional): deposit for recipient instead of sender\n   * @returns [PositionResponse]\n   */\n  depositStabilityPool(inputs: {\n    vusdCoin: TransactionArgument;\n    recipient?: string;\n  }): TransactionResult {\n    const { vusdCoin, recipient } = inputs;\n    return this.transaction.moveCall({\n      target: `${this.config.STABILITY_POOL_PACKAGE_ID}::stability_pool::deposit`,\n      arguments: [\n        this.transaction.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n        this.transaction.sharedObjectRef(this.config.CLOCK_OBJ),\n        this.transaction.pure.address(recipient ?? this.sender),\n        vusdCoin,\n      ],\n    });\n  }\n\n  /**\n   * @description withdraw from stability pool\n   * @param amount: how much amount to withdraw\n   * @param accountRequest: AccountRequest see this.accountRequest()\n   * @param amount: how much amount to withdraw\n   * @returns [Coin<VUSD>, PositionResponse]\n   */\n  withdrawStabilityPool(inputs: {\n    amount: string;\n    accountRequest?: TransactionArgument;\n    accountObj?: string | TransactionArgument;\n  }): TransactionResult {\n    const { amount, accountRequest, accountObj } = inputs;\n    const [accountReq] = accountRequest\n      ? [accountRequest]\n      : this.newAccountRequest(accountObj);\n    return this.transaction.moveCall({\n      target: `${this.config.STABILITY_POOL_PACKAGE_ID}::stability_pool::withdraw`,\n      arguments: [\n        this.transaction.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n        this.transaction.sharedObjectRef(this.config.CLOCK_OBJ),\n        accountReq,\n        this.transaction.pure.u64(amount),\n      ],\n    });\n  }\n\n  /**\n   * @description claim from stability pool\n   */\n  claimStabilityPool(inputs: {\n    accountRequest?: TransactionArgument;\n    accountObj?: string | TransactionArgument;\n  }): TransactionArgument[] {\n    const { accountRequest, accountObj } = inputs;\n    const [accountReq] = accountRequest\n      ? [accountRequest]\n      : this.newAccountRequest(accountObj);\n    const collCoins = Object.keys(this.config.VAULT_MAP).map((collSymbol) => {\n      const collType = COIN_TYPES[collSymbol as COLLATERAL_COIN];\n      const [collCoin] = this.transaction.moveCall({\n        target: `${this.config.STABILITY_POOL_OBJ}::stability_pool::claim`,\n        typeArguments: [collType],\n        arguments: [\n          this.transaction.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n          accountReq,\n        ],\n      });\n      return collCoin;\n    });\n    return collCoins;\n  }\n\n  /**\n   * @description check response for stability pool\n   * @param response: PositionResponse\n   */\n  checkResponseForStabilityPool(response: TransactionArgument) {\n    let positionResponse = response;\n    const globalConfigObj = this.transaction.sharedObjectRef(\n      this.config.INCENTIVE_GLOBAL_CONFIG_OBJ,\n    );\n    const registryObj = this.transaction.sharedObjectRef(\n      this.config.POOL_REWARDER_REGISTRY_OBJ,\n    );\n    const clockObj = this.transaction.sharedObjectRef(this.config.CLOCK_OBJ);\n    const checker = this.transaction.moveCall({\n      target: `${this.config.INCENTIVE_PACKAGE_ID}::stability_pool_incentive::new_checker`,\n      arguments: [registryObj, globalConfigObj, positionResponse],\n    });\n    (this.config.STABILITY_POOL_REWARDERS ?? []).map((rewarder) => {\n      const rewardType = COIN_TYPES[rewarder.rewardSymbol];\n      this.transaction.moveCall({\n        target: `${this.config.INCENTIVE_PACKAGE_ID}::stability_pool_incentive::update`,\n        typeArguments: [rewardType],\n        arguments: [\n          checker,\n          globalConfigObj,\n          this.transaction.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n          this.transaction.sharedObjectRef(rewarder),\n          clockObj,\n        ],\n      });\n    });\n    const [responseAfterIncentive] = this.transaction.moveCall({\n      target: `${this.config.INCENTIVE_PACKAGE_ID}::stability_pool_incentive::destroy_checker`,\n      arguments: [checker, globalConfigObj],\n    });\n    positionResponse = responseAfterIncentive;\n\n    this.transaction.moveCall({\n      target: `${this.config.STABILITY_POOL_PACKAGE_ID}::stability_pool::check_response`,\n      arguments: [\n        this.transaction.sharedObjectRef(this.config.STABILITY_POOL_OBJ),\n        positionResponse,\n      ],\n    });\n  }\n\n  /* ----- Transaction Methods ----- */\n\n  /**\n   * @description build and return Transaction of manage position\n   * @param collateralSymbol: collateral coin symbol , e.g \"IOTA\"\n   * @param depositAmount: how much amount to deposit (collateral)\n   * @param borrowAmount: how much amout to borrow (VUSD)\n   * @param repaymentAmount: how much amount to repay (VUSD)\n   * @param withdrawAmount: how much amount to withdraw (collateral)\n   * @param accountObjId: the Account object to hold position (undefined if just use EOA)\n   * @param recipient (optional): the recipient of the output coins\n   * @returns Transaction\n   */\n  async buildManagePositionTransaction(inputs: {\n    collateralSymbol: COLLATERAL_COIN;\n    depositAmount: string;\n    borrowAmount: string;\n    repaymentAmount: string;\n    withdrawAmount: string;\n    accountObjId?: string;\n    recipient?: string;\n    keepTransaction?: boolean;\n  }): Promise<Transaction> {\n    const {\n      collateralSymbol,\n      depositAmount,\n      borrowAmount,\n      repaymentAmount,\n      withdrawAmount,\n      accountObjId,\n      recipient,\n      keepTransaction,\n    } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const coinType = COIN_TYPES[collateralSymbol];\n    const [depositCoin] = await this.splitInputCoins(\n      collateralSymbol,\n      depositAmount,\n    );\n    const [repaymentCoin] = await this.splitInputCoins(\"VUSD\", repaymentAmount);\n    if (Number(borrowAmount) > 0 || Number(withdrawAmount) > 0) {\n      const [priceResult] = await this.aggregatePrice(collateralSymbol);\n      const [updateRequest] = this.debtorRequest({\n        collateralSymbol,\n        depositCoin,\n        borrowAmount,\n        repaymentCoin,\n        withdrawAmount,\n        accountObj: accountObjId,\n      });\n      const [collCoin, vusdCoin, response] = this.updatePosition({\n        collateralSymbol,\n        updateRequest,\n        priceResult,\n      });\n      // emit point\n      if (isDepositPointBonusCoin(collateralSymbol))\n        this.emitPointForDepositAction(collateralSymbol, response);\n\n      this.checkResponse({ collateralSymbol, response });\n      if (Number(withdrawAmount) > 0) {\n        this.transaction.transferObjects([collCoin], recipient ?? this.sender);\n      } else {\n        this.transaction.moveCall({\n          target: \"0x2::coin::destroy_zero\",\n          typeArguments: [coinType],\n          arguments: [collCoin],\n        });\n      }\n      if (Number(borrowAmount) > 0) {\n        if (recipient === \"StabilityPool\") {\n          const [response] = this.depositStabilityPool({ vusdCoin, recipient });\n          this.checkResponseForStabilityPool(response);\n        } else {\n          this.transaction.transferObjects(\n            [vusdCoin],\n            recipient ?? this.sender,\n          );\n        }\n      } else {\n        this.transaction.moveCall({\n          target: \"0x2::coin::destroy_zero\",\n          typeArguments: [COIN_TYPES.VUSD],\n          arguments: [vusdCoin],\n        });\n      }\n      const tx = this.getTransaction();\n      this.resetTransaction();\n      return tx;\n    } else {\n      const [updateRequest] = this.debtorRequest({\n        collateralSymbol,\n        depositCoin,\n        borrowAmount,\n        repaymentCoin,\n        withdrawAmount,\n        accountObj: accountObjId,\n      });\n      const [collCoin, vusdCoin, response] = this.updatePosition({\n        collateralSymbol,\n        updateRequest,\n      });\n      // emit point\n      if (isDepositPointBonusCoin(collateralSymbol))\n        this.emitPointForDepositAction(collateralSymbol, response);\n\n      this.checkResponse({ collateralSymbol, response });\n      this.transaction.moveCall({\n        target: \"0x2::coin::destroy_zero\",\n        typeArguments: [coinType],\n        arguments: [collCoin],\n      });\n      this.transaction.moveCall({\n        target: \"0x2::coin::destroy_zero\",\n        typeArguments: [COIN_TYPES.VUSD],\n        arguments: [vusdCoin],\n      });\n      const tx = this.getTransaction();\n      if (!keepTransaction) this.resetTransaction();\n      return tx;\n    }\n  }\n\n  /**\n   * @description build and return Transaction of close position\n   * @param collateralSymbol: collateral coin symbol , e.g \"IOTA\"\n   * @param accountObjId: the Account object to hold position (undefined if just use EOA)\n   * @param recipient (optional): the recipient of the output coins\n   * @returns Transaction\n   */\n  async buildClosePositionTransaction(inputs: {\n    collateralSymbol: COLLATERAL_COIN;\n    accountObjId?: string;\n    recipient?: string;\n    keepTransaction?: boolean;\n  }): Promise<Transaction> {\n    const { collateralSymbol, accountObjId, recipient, keepTransaction } =\n      inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const collType = COIN_TYPES[collateralSymbol];\n    const vaultObj = this.config.VAULT_MAP[collateralSymbol].vault;\n    const [collAmount, debtAmount] = this.transaction.moveCall({\n      target: `${this.config.CDP_PACKAGE_ID}::vault::get_position_data`,\n      typeArguments: [collType],\n      arguments: [\n        this.transaction.sharedObjectRef(vaultObj),\n        this.transaction.pure.address(this.sender),\n        this.transaction.sharedObjectRef(this.config.CLOCK_OBJ),\n      ],\n    });\n    const repaymentCoin = await this.splitInputCoins(\"VUSD\", debtAmount);\n    const [updateRequest] = this.debtorRequest({\n      collateralSymbol,\n      depositCoin: this.zeroCoin(collateralSymbol),\n      borrowAmount: \"0\",\n      repaymentCoin,\n      withdrawAmount: collAmount,\n      accountObj: accountObjId,\n    });\n    const [collCoin, vusdCoin, response] = this.updatePosition({\n      collateralSymbol,\n      updateRequest,\n    });\n    // emit point\n    if (isDepositPointBonusCoin(collateralSymbol))\n      this.emitPointForDepositAction(collateralSymbol, response);\n\n    this.checkResponse({ collateralSymbol, response });\n    this.transaction.moveCall({\n      target: \"0x2::coin::destroy_zero\",\n      typeArguments: [COIN_TYPES.VUSD],\n      arguments: [vusdCoin],\n    });\n    this.transaction.transferObjects(\n      [collCoin],\n      recipient ?? this.transaction.pure.address(this.sender),\n    );\n\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description build and return Transaction of deposit stability pool\n   * @param depositAmount: how much amount to deposit (collateral)\n   * @returns Transaction\n   */\n  async buildDepositStabilityPoolTransaction(inputs: {\n    depositAmount: string;\n    recipient?: string;\n    keepTransaction?: boolean;\n  }): Promise<Transaction> {\n    const { depositAmount, recipient, keepTransaction } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const [vusdCoin] = await this.splitInputCoins(\"VUSD\", depositAmount);\n    const [response] = this.depositStabilityPool({ vusdCoin, recipient });\n    this.checkResponseForStabilityPool(response);\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description build and return Transaction of withdraw stability pool\n   * @param withdrawAmount: how much amount to withdraw (collateral)\n   * @returns Transaction\n   */\n  async buildWithdrawStabilityPoolTransaction(inputs: {\n    withdrawAmount: string;\n    accountObj?: string;\n    keepTransaction?: boolean;\n  }): Promise<Transaction> {\n    const { withdrawAmount: amount, accountObj, keepTransaction } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const [vusdOut, response] = this.withdrawStabilityPool({\n      amount,\n      accountObj,\n    });\n    this.checkResponseForStabilityPool(response);\n    this.transaction.transferObjects([vusdOut], this.sender);\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description build and return Transaction of withdraw stability pool\n   * @param withdrawAmount: how much amount to withdraw (collateral)\n   * @returns Transaction\n   */\n  async buildClaimStabilityPoolTransaction(inputs: {\n    accountObj?: string;\n    keepTransaction?: boolean;\n  }): Promise<Transaction> {\n    const { keepTransaction } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const collCoins = this.claimStabilityPool(inputs);\n    this.transaction.transferObjects(collCoins, this.sender);\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description claim the rewards from borrow incentive program\n   */\n  buildClaimBorrowRewards(inputs: {\n    accountObj?: string | TransactionArgument;\n    keepTransaction?: boolean;\n  }): Transaction {\n    const { accountObj, keepTransaction } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const [accountReq] = this.newAccountRequest(accountObj);\n    const globalConfigObj = this.transaction.sharedObjectRef(\n      this.config.INCENTIVE_GLOBAL_CONFIG_OBJ,\n    );\n    const clockObj = this.transaction.sharedObjectRef(this.config.CLOCK_OBJ);\n    Object.keys(this.config.VAULT_MAP).map((collSymbol) => {\n      const vaultInfo = this.config.VAULT_MAP[collSymbol as COLLATERAL_COIN];\n      const rewarders = vaultInfo.rewarders;\n      const vaultObj = this.transaction.sharedObjectRef(vaultInfo.vault);\n      if (rewarders) {\n        rewarders.map((rewarder) => {\n          const [reward] = this.transaction.moveCall({\n            target: `${this.config.INCENTIVE_PACKAGE_ID}::borrow_incentive::claim`,\n            typeArguments: [\n              COIN_TYPES[collSymbol as COLLATERAL_COIN],\n              COIN_TYPES[rewarder.rewardSymbol],\n            ],\n            arguments: [\n              this.transaction.sharedObjectRef(rewarder),\n              globalConfigObj,\n              vaultObj,\n              accountReq,\n              clockObj,\n            ],\n          });\n          this.transaction.transferObjects([reward], this.sender);\n        });\n      }\n    });\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description claim the rewards from stability pool incentive program\n   */\n  buildClaimStabilityPoolRewards(inputs: {\n    accountObj?: string | TransactionArgument;\n    keepTransaction?: boolean;\n  }): Transaction {\n    const { accountObj, keepTransaction } = inputs;\n    if (!keepTransaction) this.resetTransaction();\n    if (!this.sender) throw new Error(\"Sender is not set\");\n    this.transaction.setSender(this.sender);\n    const [accountReq] = this.newAccountRequest(accountObj);\n    const globalConfigObj = this.transaction.sharedObjectRef(\n      this.config.INCENTIVE_GLOBAL_CONFIG_OBJ,\n    );\n    const clockObj = this.transaction.sharedObjectRef(this.config.CLOCK_OBJ);\n    const stabilityPoolObj = this.transaction.sharedObjectRef(\n      this.config.STABILITY_POOL_OBJ,\n    );\n    this.config.STABILITY_POOL_REWARDERS.map((rewarder) => {\n      const [reward] = this.transaction.moveCall({\n        target: `${this.config.INCENTIVE_PACKAGE_ID}::stability_pool_incentive::claim`,\n        typeArguments: [COIN_TYPES[rewarder.rewardSymbol]],\n        arguments: [\n          this.transaction.sharedObjectRef(rewarder),\n          globalConfigObj,\n          stabilityPoolObj,\n          accountReq,\n          clockObj,\n        ],\n      });\n      this.transaction.transferObjects([reward], this.sender);\n    });\n    const tx = this.getTransaction();\n    if (!keepTransaction) this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description claim total rewards\n   */\n  buildClaimTotalRewards(inputs: {\n    accountObj?: string | TransactionArgument;\n  }): Transaction {\n    this.resetTransaction();\n    this.buildClaimBorrowRewards({ ...inputs, keepTransaction: true });\n    this.buildClaimStabilityPoolRewards({ ...inputs, keepTransaction: true });\n    const tx = this.getTransaction();\n    this.resetTransaction();\n    return tx;\n  }\n\n  /**\n   * @description instruction for emitting point request\n   */\n  emitPointForDepositAction(\n    collateralSymbol: DEPOSIT_POINT_BONUS_COIN,\n    response: TransactionArgument,\n  ) {\n    this.transaction.moveCall({\n      target: `${this.config.POINT_PACKAGE_ID}::point::emit_point_for_deposit_action`,\n      typeArguments: [COIN_TYPES[collateralSymbol]],\n      arguments: [\n        this.transaction.sharedObjectRef(\n          this.config.POINT_GLOBAL_CONFIG_SHARED_OBJECT_REF,\n        ),\n        this.transaction.sharedObjectRef(\n          this.config.POINT_HANDLER_MAP[collateralSymbol],\n        ),\n        this.transaction.sharedObjectRef(\n          this.config.VAULT_MAP[collateralSymbol].vault,\n        ),\n        response,\n        this.transaction.object.clock(),\n      ],\n    });\n  }\n}\n","import { COIN } from \"@/types\";\n\nexport const COIN_TYPES: Record<COIN, string> = {\n  IOTA: \"0x0000000000000000000000000000000000000000000000000000000000000002::iota::IOTA\",\n  stIOTA:\n    \"0x346778989a9f57480ec3fee15f2cd68409c73a62112d40a3efd13987997be68c::cert::CERT\",\n  VUSD: \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f::vusd::VUSD\",\n};\n\nexport const COIN_DECIMALS: Record<COIN, number> = {\n  IOTA: 9,\n  stIOTA: 9,\n  VUSD: 6,\n};\n","import {\n  COLLATERAL_COIN,\n  DEPOSIT_POINT_BONUS_COIN,\n  Rewarder,\n  SharedObjectRef,\n  VaultObjectInfo,\n} from \"@/types\";\n\nexport type ConfigType = {\n  ORIGINAL_FRAMEWORK_PACKAGE_ID: string;\n  ORIGINAL_VUSD_PACKAGE_ID: string;\n  ORIGINAL_ORACLE_PACKAGE_ID: string;\n  ORIGINAL_CDP_PACKAGE_ID: string;\n  ORIGINAL_STABILITY_POOL_PACKAGE_ID: string;\n  ORIGINAL_INCENTIVE_PACKAGE_ID: string;\n  ORIGINAL_POINT_PACKAGE_ID: string;\n\n  FRAMEWORK_PACKAGE_ID: string;\n  VUSD_PACKAGE_ID: string;\n  ORACLE_PACKAGE_ID: string;\n  CDP_PACKAGE_ID: string;\n  STABILITY_POOL_PACKAGE_ID: string;\n  INCENTIVE_PACKAGE_ID: string;\n  POINT_PACKAGE_ID: string;\n\n  CLOCK_OBJ: SharedObjectRef;\n  TREASURY_OBJ: SharedObjectRef;\n  STABILITY_POOL_OBJ: SharedObjectRef;\n  INCENTIVE_GLOBAL_CONFIG_OBJ: SharedObjectRef;\n  VAULT_REWARDER_REGISTRY_OBJ: SharedObjectRef;\n  POOL_REWARDER_REGISTRY_OBJ: SharedObjectRef;\n  VAULT_REWARDER_OBJ: string;\n  POOL_REWARDER_OBJ: string;\n\n  PYTH_STATE_ID: string;\n  WORMHOLE_STATE_ID: string;\n  PYTH_RULE_PACKAGE_ID: string;\n  PYTH_RULE_CONFIG_OBJ: SharedObjectRef;\n\n  CERT_RULE_PACKAGE_ID: string;\n  CERT_NATIVE_POOL_OBJ: SharedObjectRef;\n  CERT_METADATA_OBJ: SharedObjectRef;\n\n  POINT_PACKAGE_ADMIN_CAP_OBJECT_ID: string;\n  POINT_GLOBAL_CONFIG_SHARED_OBJECT_REF: SharedObjectRef;\n  POINT_HANDLER_MAP: Record<DEPOSIT_POINT_BONUS_COIN, SharedObjectRef>;\n\n  STABILITY_POOL_TABLE_ID: string;\n  STABILITY_POOL_REWARDERS: Rewarder[];\n\n  VAULT_MAP: Record<COLLATERAL_COIN, VaultObjectInfo>;\n};\n\nexport const CONFIG: Record<\"mainnet\" | \"testnet\", ConfigType> = {\n  mainnet: {\n    ORIGINAL_FRAMEWORK_PACKAGE_ID:\n      \"0x7400af41a9b9d7e4502bc77991dbd1171f90855564fd28afa172a5057beb083b\",\n    ORIGINAL_VUSD_PACKAGE_ID:\n      \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f\",\n    ORIGINAL_ORACLE_PACKAGE_ID:\n      \"0x7eebbee92f64ba2912bdbfba1864a362c463879fc5b3eacc735c1dcb255cc2cf\",\n    ORIGINAL_CDP_PACKAGE_ID:\n      \"0xcdeeb40cd7ffd7c3b741f40a8e11cb784a5c9b588ce993d4ab86479072386ba1\",\n    ORIGINAL_STABILITY_POOL_PACKAGE_ID:\n      \"0xc7ab9b9353e23c6a3a15181eb51bf7145ddeff1a5642280394cd4d6a0d37d83b\",\n    ORIGINAL_INCENTIVE_PACKAGE_ID:\n      \"0xe66a8a84964f758fd1b2154d68247277a14983c90a810c8fd9e6263116f15019\",\n    ORIGINAL_POINT_PACKAGE_ID:\n      \"0x745a1c670fd04d9e71b43a3593a855c79af5e6aa6979d1029f35ec9baa344c1e\",\n\n    FRAMEWORK_PACKAGE_ID:\n      \"0x7400af41a9b9d7e4502bc77991dbd1171f90855564fd28afa172a5057beb083b\",\n    VUSD_PACKAGE_ID:\n      \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f\",\n    ORACLE_PACKAGE_ID:\n      \"0x7eebbee92f64ba2912bdbfba1864a362c463879fc5b3eacc735c1dcb255cc2cf\",\n    CDP_PACKAGE_ID:\n      \"0x34fa327ee4bb581d81d85a8c40b6a6b4260630a0ef663acfe6de0e8ca471dd22\",\n    STABILITY_POOL_PACKAGE_ID:\n      \"0xb80b111f3dfb35ea26bd288e187af349c4e5b74a5fda143066f5ff9de84f34bf\",\n    INCENTIVE_PACKAGE_ID:\n      \"0xee096055d78c773fb34b6fa22c16e1560f9a93713308045489e781e7a299b03e\",\n    POINT_PACKAGE_ID:\n      \"0x745a1c670fd04d9e71b43a3593a855c79af5e6aa6979d1029f35ec9baa344c1e\",\n\n    CLOCK_OBJ: {\n      objectId:\n        \"0x0000000000000000000000000000000000000000000000000000000000000006\",\n      mutable: false,\n      initialSharedVersion: 1,\n    },\n    TREASURY_OBJ: {\n      objectId:\n        \"0x81f525f4fa5b2d3cf58677d3e39aabc4b0a1ca25cbba605033cfe417e47b0a16\",\n      mutable: true,\n      initialSharedVersion: 22329876,\n    },\n    STABILITY_POOL_OBJ: {\n      objectId:\n        \"0x6101272394511caf38ce5a6d120d3b4d009b6efabae8faac43aa9ac938cec558\",\n      initialSharedVersion: 22329903,\n      mutable: true,\n    },\n    INCENTIVE_GLOBAL_CONFIG_OBJ: {\n      objectId:\n        \"0xc30c82b96429c2c215dbc994e73250c8b29e747c9540a547c7bc95e6d7e098d8\",\n      mutable: false,\n      initialSharedVersion: 120165683,\n    },\n    VAULT_REWARDER_REGISTRY_OBJ: {\n      objectId:\n        \"0x3b5a6649ce2c4348ae7d2dc72bc8e42cecfc6c24b9edb701635f9c49c765ff69\",\n      mutable: false,\n      initialSharedVersion: 120165683,\n    },\n    POOL_REWARDER_REGISTRY_OBJ: {\n      objectId:\n        \"0xc043719e2da72c1182466bbccf01b966d500337749cd6a06e042714444d2852c\",\n      mutable: false,\n      initialSharedVersion: 120165683,\n    },\n    VAULT_REWARDER_OBJ:\n      \"0xf9ac7f70f1e364cd31734f5a3ebf5c580d3da11c06ca6d7832e82cc417e022eb\",\n    POOL_REWARDER_OBJ:\n      \"0xb295972b5c978ebb96339b81a762cbc047be78747c2f7d19e661281560394c2b\",\n    PYTH_STATE_ID:\n      \"0x6bc33855c7675e006f55609f61eebb1c8a104d8973a698ee9efd3127c210b37f\",\n    WORMHOLE_STATE_ID:\n      \"0xd43b448afc9dd01deb18273ec39d8f27ddd4dd46b0922383874331771b70df73\",\n    PYTH_RULE_PACKAGE_ID:\n      \"0xed5a8dac2ca41ae9bdc1c7f778b0949d3e26c18c51ed284c4cfa4030d0bb64c2\",\n    PYTH_RULE_CONFIG_OBJ: {\n      objectId:\n        \"0xbcc4f6e3ca3d4a83eac39282ab7d1cb086924c58bef825d69c33b00fea1105b8\",\n      initialSharedVersion: 22329882,\n      mutable: false,\n    },\n    CERT_RULE_PACKAGE_ID:\n      \"0x01edb9afe0663b8762d2e0a18923df8bee98d28f3a60ac56ff67a27bbf53a7ac\",\n    CERT_NATIVE_POOL_OBJ: {\n      objectId:\n        \"0x02d641d7b021b1cd7a2c361ac35b415ae8263be0641f9475ec32af4b9d8a8056\",\n      initialSharedVersion: 19,\n      mutable: false,\n    },\n    CERT_METADATA_OBJ: {\n      objectId:\n        \"0x8c25ec843c12fbfddc7e25d66869f8639e20021758cac1a3db0f6de3c9fda2ed\",\n      initialSharedVersion: 19,\n      mutable: false,\n    },\n    POINT_PACKAGE_ADMIN_CAP_OBJECT_ID:\n      \"0x2bc471bd479eac37891f3ad6641142960478d6f1724a038e2fe56f7fd28e0091\",\n    POINT_GLOBAL_CONFIG_SHARED_OBJECT_REF: {\n      objectId:\n        \"0x86f95e88bcc50edbd930153079db969e92f050c887d7d4b4642a08cbb04d8787\",\n      mutable: false,\n      initialSharedVersion: 126182186,\n    },\n    POINT_HANDLER_MAP: {\n      stIOTA: {\n        objectId:\n          \"0xcd096080bca84ea1c60dfe2b8efcad1eceb41acbe69de1c71f867dd2d3b51dd1\",\n        mutable: false,\n        initialSharedVersion: 126182187,\n      },\n    },\n    STABILITY_POOL_TABLE_ID:\n      \"0x6dd808c50bab98757f7523562bdef7d33d506bb447ea9e708072bf13a5e29f02\",\n    STABILITY_POOL_REWARDERS: [\n      {\n        objectId:\n          \"0xb295972b5c978ebb96339b81a762cbc047be78747c2f7d19e661281560394c2b\",\n        mutable: true,\n        initialSharedVersion: 121322519,\n        rewardSymbol: \"stIOTA\",\n      },\n    ],\n\n    VAULT_MAP: {\n      IOTA: {\n        priceAggregater: {\n          objectId:\n            \"0x052c40b4e8f16df5238457f3a7b3b0eeaa49c6bc8acc22f6a7790ab32495b2c6\",\n          mutable: false,\n          initialSharedVersion: 22329880,\n        },\n        vault: {\n          objectId:\n            \"0xaf306be8419cf059642acdba3b4e79a5ae893101ae62c8331cefede779ef48d5\",\n          mutable: true,\n          initialSharedVersion: 22329895,\n        },\n        pythPriceId:\n          \"0xc7b72e5d860034288c9335d4d325da4272fe50c92ab72249d58f6cbba30e4c44\",\n      },\n      stIOTA: {\n        priceAggregater: {\n          objectId:\n            \"0x8c730f64aa369eed69ddf7eea39c78bf0afd3f9fbb4ee0dfe457f6dea5a0f4ed\",\n          mutable: false,\n          initialSharedVersion: 22329881,\n        },\n        vault: {\n          objectId:\n            \"0xc9cb494657425f350af0948b8509efdd621626922e9337fd65eb161ec33de259\",\n          mutable: true,\n          initialSharedVersion: 22329896,\n        },\n        rewarders: [\n          {\n            objectId:\n              \"0xf9ac7f70f1e364cd31734f5a3ebf5c580d3da11c06ca6d7832e82cc417e022eb\",\n            mutable: true,\n            initialSharedVersion: 121322517,\n            rewardSymbol: \"stIOTA\",\n          },\n        ],\n      },\n    },\n  },\n  testnet: {\n    ORIGINAL_FRAMEWORK_PACKAGE_ID: \"\",\n    ORIGINAL_VUSD_PACKAGE_ID: \"\",\n    ORIGINAL_ORACLE_PACKAGE_ID: \"\",\n    ORIGINAL_CDP_PACKAGE_ID: \"\",\n    ORIGINAL_STABILITY_POOL_PACKAGE_ID: \"\",\n    ORIGINAL_INCENTIVE_PACKAGE_ID: \"\",\n    ORIGINAL_POINT_PACKAGE_ID: \"\",\n\n    FRAMEWORK_PACKAGE_ID: \"\",\n    VUSD_PACKAGE_ID: \"\",\n    ORACLE_PACKAGE_ID: \"\",\n    CDP_PACKAGE_ID: \"\",\n    STABILITY_POOL_PACKAGE_ID: \"\",\n    INCENTIVE_PACKAGE_ID: \"\",\n    POINT_PACKAGE_ID: \"\",\n\n    CLOCK_OBJ: {\n      objectId:\n        \"0x0000000000000000000000000000000000000000000000000000000000000006\",\n      mutable: false,\n      initialSharedVersion: 1,\n    },\n    TREASURY_OBJ: {\n      objectId: \"\",\n      mutable: true,\n      initialSharedVersion: 0,\n    },\n    STABILITY_POOL_OBJ: {\n      objectId: \"\",\n      initialSharedVersion: 0,\n      mutable: true,\n    },\n    INCENTIVE_GLOBAL_CONFIG_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    VAULT_REWARDER_REGISTRY_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    POOL_REWARDER_REGISTRY_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    VAULT_REWARDER_OBJ: \"\",\n    POOL_REWARDER_OBJ: \"\",\n\n    PYTH_STATE_ID: \"\",\n    WORMHOLE_STATE_ID: \"\",\n    PYTH_RULE_PACKAGE_ID: \"\",\n    PYTH_RULE_CONFIG_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    CERT_RULE_PACKAGE_ID: \"\",\n    CERT_NATIVE_POOL_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    CERT_METADATA_OBJ: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    POINT_PACKAGE_ADMIN_CAP_OBJECT_ID: \"\",\n    POINT_GLOBAL_CONFIG_SHARED_OBJECT_REF: {\n      objectId: \"\",\n      mutable: false,\n      initialSharedVersion: 0,\n    },\n    POINT_HANDLER_MAP: {\n      stIOTA: {\n        objectId: \"\",\n        mutable: false,\n        initialSharedVersion: 0,\n      },\n    },\n    STABILITY_POOL_TABLE_ID: \"\",\n    STABILITY_POOL_REWARDERS: [],\n    VAULT_MAP: {\n      IOTA: {\n        priceAggregater: {\n          objectId: \"\",\n          mutable: false,\n          initialSharedVersion: 0,\n        },\n        vault: {\n          objectId: \"\",\n          mutable: false,\n          initialSharedVersion: 0,\n        },\n        pythPriceId: \"\",\n      },\n      stIOTA: {\n        priceAggregater: {\n          objectId: \"\",\n          mutable: false,\n          initialSharedVersion: 0,\n        },\n        vault: {\n          objectId: \"\",\n          mutable: false,\n          initialSharedVersion: 0,\n        },\n        rewarders: [],\n      },\n    },\n  },\n};\n","export type COIN = \"IOTA\" | \"stIOTA\" | \"VUSD\";\nexport type COLLATERAL_COIN = \"IOTA\" | \"stIOTA\";\n\nexport type DEPOSIT_POINT_BONUS_COIN = Extract<COIN, \"stIOTA\">;\n\nexport function isDepositPointBonusCoin(\n  coin: COIN,\n): coin is DEPOSIT_POINT_BONUS_COIN {\n  return coin === \"stIOTA\";\n}\n","import { COIN } from \"@/types\";\nimport { COIN_TYPES } from \"@/constants\";\nimport { normalizeIotaAddress } from \"@iota/iota-sdk/utils\";\n\nexport function getObjectNames(objectTypes: string[]) {\n  const accept_coin_type = Object.values(COIN_TYPES);\n  const accept_coin_name = Object.keys(COIN_TYPES);\n\n  const coinTypeList = objectTypes.map(\n    (type) => type.split(\"<\").pop()?.replace(\">\", \"\") ?? \"\",\n  );\n\n  const objectNameList: string[] = [];\n\n  coinTypeList.forEach((type) => {\n    const typeIndex = accept_coin_type.indexOf(type);\n    const coinName = accept_coin_name[typeIndex];\n    objectNameList.push(coinName ?? \"\");\n  });\n\n  return objectNameList;\n}\n\nexport const getCoinType = (str: string) => {\n  const startIndex = str.indexOf(\"<\");\n  const endIndex = str.lastIndexOf(\">\");\n\n  if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {\n    const coinType = str.slice(startIndex + 1, endIndex);\n    return coinType === \"0x2::iota::IOTA\" ? COIN_TYPES.IOTA : coinType;\n  }\n\n  return null;\n};\n\nexport const getCoinSymbol = (coinType: string) => {\n  const coin = Object.keys(COIN_TYPES).find(\n    (key) =>\n      normalizeIotaAddress(COIN_TYPES[key as COIN]) ===\n      normalizeIotaAddress(coinType),\n  );\n  if (coin) {\n    return coin as COIN;\n  }\n  return undefined;\n};\n\nexport function U64FromBytes(x: number[]) {\n  let u64 = BigInt(0);\n  for (let i = x.length - 1; i >= 0; i--) {\n    u64 = (u64 << BigInt(8)) | BigInt(x[i] ?? 0);\n  }\n  return u64;\n}\n\nexport const formatUnits = (value: bigint, decimals: number) => {\n  let display = value.toString();\n\n  const negative = display.startsWith(\"-\");\n  if (negative) display = display.slice(1);\n\n  display = display.padStart(decimals, \"0\");\n\n  const integer = display.slice(0, display.length - decimals);\n  let fraction = display.slice(display.length - decimals);\n\n  fraction = fraction.replace(/(0+)$/, \"\");\n  return `${negative ? \"-\" : \"\"}${integer || \"0\"}${\n    fraction ? `.${fraction}` : \"\"\n  }`;\n};\n\nexport const formatBigInt = (value: string, decimals: number = 9) => {\n  const formatted = formatUnits(BigInt(value), decimals);\n  return Number(formatted);\n};\n\nexport const parseUnits = (value: number | string, decimals: number) => {\n  let [integer, fraction = \"0\"] =\n    typeof value == \"string\" ? value.split(\".\") : value.toString().split(\".\");\n\n  if (integer === undefined) {\n    return BigInt(0);\n  }\n  const negative = integer.startsWith(\"-\");\n  if (negative) integer = integer.slice(1);\n\n  // trim leading zeros.\n  fraction = fraction.replace(/(0+)$/, \"\");\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    integer = `${Math.round(Number(`${integer}.${fraction}`))}`;\n    fraction = \"\";\n  } else if (fraction.length > decimals) {\n    const [before, after] = [\n      fraction.slice(0, decimals),\n      fraction.slice(decimals),\n    ];\n    fraction = `${\n      /^0+$/.test(before) ? before.slice(0, before.length - 1) : \"\"\n    }${Math.round(Number(`${before}.${after}`))}`;\n  } else {\n    fraction = fraction.padEnd(decimals, \"0\");\n  }\n\n  return BigInt(`${negative ? \"-\" : \"\"}${integer}${fraction}`);\n};\n","import {\n  IotaMoveObject,\n  IotaObjectData,\n  IotaObjectResponse,\n  IotaParsedData,\n} from \"@iota/iota-sdk/client\";\nimport type { Infer } from \"superstruct\";\nimport { any, record, string } from \"superstruct\";\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport interface IotaObjectDataWithContent extends IotaObjectData {\n  content: IotaParsedData;\n}\n\nfunction isIotaObjectDataWithContent(\n  data: IotaObjectData,\n): data is IotaObjectDataWithContent {\n  return data.content !== undefined;\n}\n\nexport function getIotaObjectData(\n  resp: IotaObjectResponse,\n): IotaObjectData | null | undefined {\n  return resp.data;\n}\n\nexport function getMoveObject(\n  data: IotaObjectResponse | IotaObjectData,\n): IotaMoveObject | undefined {\n  const obj =\n    \"data\" in data ? getIotaObjectData(data) : (data as IotaObjectData);\n\n  if (\n    !obj ||\n    !isIotaObjectDataWithContent(obj) ||\n    obj.content.dataType !== \"moveObject\"\n  ) {\n    return undefined;\n  }\n\n  return obj.content as IotaMoveObject;\n}\n\nexport function getObjectFields(\n  resp: IotaObjectResponse | IotaMoveObject | IotaObjectData,\n): ObjectContentFields | undefined {\n  if (\"fields\" in resp) {\n    return resp.fields;\n  }\n\n  return getMoveObject(resp)?.fields;\n}\n\nexport const getObjectGenerics = (resp: IotaObjectResponse): string[] => {\n  const objType = resp.data?.type;\n\n  const startIdx = objType?.indexOf?.(\"<\");\n  const endIdx = objType?.lastIndexOf?.(\">\");\n\n  return startIdx ? objType!.slice(startIdx + 1, endIdx).split(\", \") : [];\n};\n","import {\n  COLLATERAL_COIN,\n  // PositionInfo,\n  // PositionResponse,\n  // StabilityPoolInfo,\n  // StabilityPoolResponse,\n  VaultInfo,\n  VaultResponse,\n} from \"@/types\";\nimport { formatBigInt } from \"./format\";\n\n// Convert response into vault object\nexport const parseVaultObject = (\n  coinSymbol: COLLATERAL_COIN,\n  fields: VaultResponse,\n): VaultInfo => {\n  return {\n    token: coinSymbol,\n    positionTableSize: fields.position_table.fields.size,\n    collateralDecimal: Number(fields.decimal),\n    collateralBalance: fields.balance,\n    supply: fields.limited_supply.fields.supply,\n    maxSupply: fields.limited_supply.fields.limit,\n    interestRate: formatBigInt(fields.interest_rate.fields.value, 18),\n    minCollateralRatio: formatBigInt(fields.min_collateral_ratio.fields.value),\n  };\n};\n\n// Convert response into position object\n// export const parsePositionObject = (\n//   resp: PositionResponse,\n// ): PositionInfo | undefined => {\n//   const collateral = getCoinSymbol(getCoinType(resp.type) ?? \"\");\n//   if (!collateral) {\n//     return;\n//   }\n\n//   return {\n//     collateral: collateral as COLLATERAL_COIN,\n//     collAmount: resp.fields.coll_amount,\n//     debtAmount: (\n//       BigInt(resp.fields.debt_amount) + BigInt(resp.fields.interest_buffer)\n//     ).toString(),\n//   };\n// };\n\n// export const parseStabilityPoolObject = (\n//   fields: StabilityPoolResponse,\n// ): StabilityPoolInfo => {\n//   return {\n//     vusdBalance: formatBigInt(fields.balance, COIN_DECIMALS.VUSD),\n//   };\n// };\n"]}