{"version":3,"sources":["../../src/client.ts","../../src/constants/coin.ts","../../src/constants/object.ts","../../src/utils/format.ts","../../src/utils/coin.ts","../../src/utils/object.ts","../../src/utils/response.ts","../../src/builder.ts"],"sourcesContent":["import {\n  Transaction,\n  TransactionArgument,\n  TransactionResult,\n} from \"@iota/iota-sdk/transactions\";\nimport { getFullnodeUrl, IotaClient } from \"@iota/iota-sdk/client\";\n\nimport {\n  CDP_PACKAGE_ID,\n  CLOCK_OBJ,\n  COINS_TYPE_LIST,\n  FRAMEWORK_PACKAGE_ID,\n  ORACLE_PACKAGE_ID,\n  PYTH_RULE_CONFIG_OBJ,\n  PYTH_RULE_PACKAGE_ID,\n  PYTH_STATE_ID,\n  TREASURY_OBJ,\n  VAULT_MAP,\n  WORMHOLE_STATE_ID,\n} from \"@/constants\";\nimport {\n  VaultInfo,\n  VaultResponse,\n  COLLATERAL_COIN,\n  PositionInfo,\n  VaultInfoList,\n  // PositionResponse,\n  // StabilityPoolBalances,\n  // StabilityPoolResponse,\n  // StabilityPoolInfo,\n} from \"@/types\";\nimport {\n  // formatBigInt,e\n  getObjectFields,\n  getPriceResultType,\n  // parsePositionObject,\n  // parseStabilityPoolObject,\n  parseVaultObject,\n} from \"@/utils\";\nimport {\n  IotaPriceServiceConnection,\n  IotaPythClient,\n} from \"@pythnetwork/pyth-iota-js\";\nimport { bcs } from \"@iota/iota-sdk/dist/cjs/bcs\";\n\nconst DUMMY_ADDRESS = \"0x0\";\n\nexport class VirtueClient {\n  /**\n   * @description a TS wrapper over Virtue CDP client.\n   * @param network connection to fullnode: 'mainnet' | 'testnet' | 'devnet' | 'localnet' | string\n   * @param owner (optional) address of the current user (default: DUMMY_ADDRESS)\n   */\n  private rpcEndpoint: string;\n  private client: IotaClient;\n  private pythConnection: IotaPriceServiceConnection;\n  private pythClient: IotaPythClient;\n\n  constructor(\n    public network: string = \"mainnet\",\n    public owner: string = DUMMY_ADDRESS,\n  ) {\n    if (\n      network == \"mainnet\" ||\n      network == \"testnet\" ||\n      network == \"devnet\" ||\n      network == \"localnet\"\n    ) {\n      this.rpcEndpoint = getFullnodeUrl(network);\n    } else {\n      this.rpcEndpoint = network as string;\n    }\n\n    this.client = new IotaClient({ url: this.rpcEndpoint });\n    this.pythConnection = new IotaPriceServiceConnection(\n      \"https://hermes.pyth.network\",\n    );\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    this.pythClient = new IotaPythClient(\n      this.client as any,\n      PYTH_STATE_ID,\n      WORMHOLE_STATE_ID,\n    );\n  }\n\n  getClient() {\n    return this.client;\n  }\n\n  // Query\n  /**\n   * @description Get all vault objects\n   */\n  async getAllVaults(): Promise<VaultInfoList> {\n    // Get objectId from VAULT_MAP and get all vaults\n    const vaultObjectIds = Object.values(VAULT_MAP).map(\n      (v) => v.vault.objectId,\n    );\n    const vaultResults = await this.client.multiGetObjects({\n      ids: vaultObjectIds,\n      options: {\n        showContent: true,\n      },\n    });\n\n    const vaults: VaultInfoList = vaultResults.reduce((acc, res) => {\n      const fields = getObjectFields(res) as VaultResponse;\n      const token = Object.keys(VAULT_MAP).find(\n        (key) =>\n          VAULT_MAP[key as COLLATERAL_COIN].vault.objectId ===\n          res.data?.objectId,\n      );\n      if (!token) return acc;\n\n      const vault = parseVaultObject(token as COLLATERAL_COIN, fields);\n      acc[vault.token] = vault;\n      return acc;\n    }, {} as VaultInfoList);\n\n    return vaults;\n  }\n\n  /**\n   * @description Get Vault<token> object\n   */\n  async getVault(token: COLLATERAL_COIN): Promise<VaultInfo> {\n    const res = await this.client.getObject({\n      id: VAULT_MAP[token].vault.objectId,\n      options: {\n        showContent: true,\n      },\n    });\n    const fields = getObjectFields(res) as VaultResponse;\n\n    return parseVaultObject(token, fields);\n  }\n\n  async getPositionsByDebtor(debtor: string): Promise<PositionInfo[]> {\n    const tx = new Transaction();\n    const clockObj = tx.sharedObjectRef(CLOCK_OBJ);\n    const tokenList = Object.keys(VAULT_MAP) as COLLATERAL_COIN[];\n    tokenList.map((token) => {\n      tx.moveCall({\n        target: `${CDP_PACKAGE_ID}::vault::try_get_position_data`,\n        typeArguments: [COINS_TYPE_LIST[token]],\n        arguments: [\n          tx.sharedObjectRef(VAULT_MAP[token].vault),\n          tx.pure.address(debtor),\n          clockObj,\n        ],\n      });\n    });\n\n    const res = await this.getClient().devInspectTransactionBlock({\n      transactionBlock: tx,\n      sender: debtor,\n    });\n    if (!res.results) return [];\n\n    return res.results.map((value, idx) => {\n      const collateral = tokenList[idx];\n      if (value.returnValues) {\n        const [collReturn, debtReturn] = value.returnValues;\n        return {\n          collateral,\n          collAmount: collReturn\n            ? bcs.u64().parse(Uint8Array.from(collReturn[0]))\n            : \"0\",\n          debtAmount: debtReturn\n            ? bcs.u64().parse(Uint8Array.from(debtReturn[0]))\n            : \"0\",\n        };\n      } else {\n        return {\n          collateral: tokenList[idx],\n          collAmount: \"0\",\n          debtAmount: \"0\",\n        };\n      }\n    });\n  }\n\n  // async getStabilityPool(): Promise<StabilityPoolInfo> {\n  //   const res = await this.client.getObject({\n  //     id: STABILITY_POOL_OBJ.objectId,\n  //     options: {\n  //       showContent: true,\n  //     },\n  //   });\n  //   const fields = getObjectFields(res) as StabilityPoolResponse;\n  //   return parseStabilityPoolObject(fields);\n  // }\n\n  // async getStabilityPoolBalances(\n  //   account: string,\n  // ): Promise<StabilityPoolBalances> {\n  //   const tokensRes = await this.client.getOwnedObjects({\n  //     owner: account,\n  //     filter: {\n  //       StructType: `${ORIGINAL_LIQUIDATION_PACKAGE_ID}::stablility_pool::StabilityToken`,\n  //     },\n  //     options: {\n  //       showContent: true,\n  //     },\n  //   });\n  //   if (tokensRes.data) {\n  //     const vusdBalances = tokensRes.data.map((token) => {\n  //       const tokenFields = getObjectFields(token);\n  //       if (tokenFields) {\n  //         return formatBigInt(tokenFields.amount, COIN_DECIMALS.VUSD);\n  //       } else {\n  //         return 0;\n  //       }\n  //     });\n\n  //     return {\n  //       vusdBalance: vusdBalances.reduce((x, y) => x + y, 0),\n  //       collBalances: {\n  //         IOTA: 0,\n  //         stIOTA: 0,\n  //       },\n  //     };\n  //   } else {\n  //     return {\n  //       vusdBalance: 0,\n  //       collBalances: {\n  //         IOTA: 0,\n  //         stIOTA: 0,\n  //       },\n  //     };\n  //   }\n  // }\n\n  /**\n   * @description Create a price collector\n   * @param collateral coin symbol, e.g \"IOTA\"\n   */\n  newPriceCollector(\n    tx: Transaction,\n    collateralSymbol: COLLATERAL_COIN,\n  ): TransactionResult {\n    return tx.moveCall({\n      target: `${ORACLE_PACKAGE_ID}::collector::new`,\n      typeArguments: [COINS_TYPE_LIST[collateralSymbol]],\n    });\n  }\n\n  /**\n   * @description Get a price result\n   * @param collateral coin symbol, e.g \"IOTA\"\n   */\n  async aggregatePrice(\n    tx: Transaction,\n    collateralSymbol: COLLATERAL_COIN,\n  ): Promise<TransactionResult> {\n    const [collector] = this.newPriceCollector(tx, collateralSymbol);\n    const coinType = COINS_TYPE_LIST[collateralSymbol];\n    const vaultInfo = VAULT_MAP[collateralSymbol];\n    if (vaultInfo.pythPriceId) {\n      const updateData = await this.pythConnection.getPriceFeedsUpdateData([\n        vaultInfo.pythPriceId,\n      ]);\n      const [priceInfoObjId] = await this.pythClient.updatePriceFeeds(\n        tx as any,\n        updateData,\n        [vaultInfo.pythPriceId],\n      );\n      tx.moveCall({\n        target: `${PYTH_RULE_PACKAGE_ID}::pyth_rule::feed`,\n        typeArguments: [coinType],\n        arguments: [\n          collector,\n          tx.sharedObjectRef(PYTH_RULE_CONFIG_OBJ),\n          tx.sharedObjectRef(CLOCK_OBJ),\n          tx.object(PYTH_STATE_ID),\n          tx.object(priceInfoObjId),\n        ],\n      });\n      return tx.moveCall({\n        target: `${ORACLE_PACKAGE_ID}::aggregater::aggregate`,\n        typeArguments: [coinType],\n        arguments: [tx.sharedObjectRef(vaultInfo.priceAggregater), collector],\n      });\n    } else {\n      return this.aggregatePrice(tx, \"IOTA\");\n    }\n  }\n\n  /**\n   * @description Get a request to Mange Position\n   * @param tx\n   * @param collateral coin symbol , e.g \"IOTA\"\n   * @param collateral input coin\n   * @param the amount to borrow\n   * @param repyment input coin (always VUSD)\n   * @param the amount to withdraw\n   * @returns ManageRequest\n   */\n  debtorRequest(\n    tx: Transaction,\n    inputs: {\n      collateralSymbol: COLLATERAL_COIN;\n      depositCoin: TransactionArgument;\n      borrowAmount: string;\n      repaymentCoin: TransactionArgument;\n      withdrawAmount: string;\n      accountObj?: string | TransactionArgument;\n    },\n  ) {\n    const {\n      collateralSymbol,\n      depositCoin,\n      borrowAmount,\n      repaymentCoin,\n      withdrawAmount,\n      accountObj,\n    } = inputs;\n    const coinType = COINS_TYPE_LIST[collateralSymbol];\n    const vaultId = VAULT_MAP[collateralSymbol].vault.objectId;\n    const [accountReq] = accountObj\n      ? tx.moveCall({\n          target: `${FRAMEWORK_PACKAGE_ID}::account::request_with_account`,\n          arguments: [\n            typeof accountObj === \"string\" ? tx.object(accountObj) : accountObj,\n          ],\n        })\n      : tx.moveCall({\n          target: `${FRAMEWORK_PACKAGE_ID}::account::request`,\n        });\n    return tx.moveCall({\n      target: `${CDP_PACKAGE_ID}::request::debtor_request`,\n      typeArguments: [coinType],\n      arguments: [\n        accountReq,\n        tx.sharedObjectRef(TREASURY_OBJ),\n        tx.pure.id(vaultId),\n        depositCoin,\n        tx.pure.u64(borrowAmount),\n        repaymentCoin,\n        tx.pure.u64(withdrawAmount),\n      ],\n    });\n  }\n\n  /**\n   * @description Manage Position\n   * @param tx\n   * @param collateral coin symbol , e.g \"IOTA\"\n   * @param manager request, ex: see this.debtorRequest\n   * @param price result, see this.getPriceResult\n   * @param the position place to insert\n   * @returns [Coin<T>, COIN<VUSD>]\n   */\n  updatePosition(\n    tx: Transaction,\n    inputs: {\n      collateralSymbol: COLLATERAL_COIN;\n      manageRequest: TransactionArgument;\n      priceResult?: TransactionArgument;\n    },\n  ): TransactionResult {\n    const { collateralSymbol, manageRequest, priceResult } = inputs;\n    const vault = VAULT_MAP[collateralSymbol].vault;\n    const priceResultOpt = priceResult\n      ? tx.moveCall({\n          target: `0x1::option::some`,\n          typeArguments: [getPriceResultType(collateralSymbol)],\n          arguments: [priceResult],\n        })\n      : tx.moveCall({\n          target: `0x1::option::none`,\n          typeArguments: [getPriceResultType(collateralSymbol)],\n        });\n    return tx.moveCall({\n      target: `${CDP_PACKAGE_ID}::vault::update_position`,\n      typeArguments: [COINS_TYPE_LIST[collateralSymbol]],\n      arguments: [\n        tx.sharedObjectRef(vault),\n        tx.sharedObjectRef(TREASURY_OBJ),\n        tx.sharedObjectRef(CLOCK_OBJ),\n        priceResultOpt,\n        manageRequest,\n      ],\n    });\n  }\n\n  // depositStabilityPool(\n  //   tx: Transaction,\n  //   vusdCoin: TransactionArgument,\n  // ): TransactionResult {\n  //   return tx.moveCall({\n  //     target: `${LIQUIDATION_PACKAGE_ID}::stablility_pool::deposit`,\n  //     arguments: [tx.sharedObjectRef(STABILITY_POOL_OBJ), vusdCoin],\n  //   });\n  // }\n\n  // withdrawStabilityPool(\n  //   tx: Transaction,\n  //   tokens: TransactionArgument[],\n  //   amount: string,\n  // ): TransactionResult {\n  //   const stabilityPool = tx.sharedObjectRef(STABILITY_POOL_OBJ);\n  //   const [mainCoin, ...otherCoins] = tokens.map((token) => {\n  //     const [vusdCoin] = tx.moveCall({\n  //       target: `${LIQUIDATION_PACKAGE_ID}::stablility_pool::withdraw`,\n  //       arguments: [stabilityPool, token],\n  //     });\n  //     return vusdCoin;\n  //   });\n  //   if (otherCoins.length > 0) {\n  //     tx.mergeCoins(mainCoin, otherCoins);\n  //   }\n  //   const [outCoin] = tx.splitCoins(mainCoin, [amount]);\n  //   const [token] = this.depositStabilityPool(tx, mainCoin);\n  //   return [outCoin, token] as TransactionResult;\n  // }\n}\n","import { COIN } from \"@/types\";\n\nexport const COINS_TYPE_LIST: Record<COIN, string> = {\n  IOTA: \"0x0000000000000000000000000000000000000000000000000000000000000002::iota::IOTA\",\n  stIOTA:\n    \"0x346778989a9f57480ec3fee15f2cd68409c73a62112d40a3efd13987997be68c::cert::CERT\",\n  VUSD: \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f::vusd::VUSD\",\n};\n\nexport const COIN_DECIMALS: Record<COIN, number> = {\n  IOTA: 9,\n  stIOTA: 9,\n  VUSD: 6,\n};\n","import { COLLATERAL_COIN } from \"@/types\";\nimport { SharedObjectRef } from \"@iota/iota-sdk/dist/cjs/bcs/types\";\n\n/// Original Package IDs\n\nexport const ORIGINAL_FRAMEWORK_PACKAGE_ID =\n  \"0x7400af41a9b9d7e4502bc77991dbd1171f90855564fd28afa172a5057beb083b\";\nexport const ORIGINAL_VUSD_PACKAGE_ID =\n  \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f\";\nexport const ORIGINAL_ORACLE_PACKAGE_ID =\n  \"0x7eebbee92f64ba2912bdbfba1864a362c463879fc5b3eacc735c1dcb255cc2cf\";\nexport const ORIGINAL_CDP_PACKAGE_ID =\n  \"0xcdeeb40cd7ffd7c3b741f40a8e11cb784a5c9b588ce993d4ab86479072386ba1\";\n// export const ORIGINAL_LIQUIDATION_PACKAGE_ID =\n//   \"0x3b79a39a58128d94bbf2021e36b31485898851909c8167ab0df10fb2824a0f83\";\n\n/// Latest Package IDs\n\nexport const FRAMEWORK_PACKAGE_ID =\n  \"0x7400af41a9b9d7e4502bc77991dbd1171f90855564fd28afa172a5057beb083b\";\nexport const VUSD_PACKAGE_ID =\n  \"0xd3b63e603a78786facf65ff22e79701f3e824881a12fa3268d62a75530fe904f\";\nexport const ORACLE_PACKAGE_ID =\n  \"0x7eebbee92f64ba2912bdbfba1864a362c463879fc5b3eacc735c1dcb255cc2cf\";\nexport const CDP_PACKAGE_ID =\n  \"0x34fa327ee4bb581d81d85a8c40b6a6b4260630a0ef663acfe6de0e8ca471dd22 \";\n// export const LIQUIDATION_PACKAGE_ID =\n//   \"0x3b79a39a58128d94bbf2021e36b31485898851909c8167ab0df10fb2824a0f83\";\n\n/// Shared Objects\n\nexport const CLOCK_OBJ = {\n  objectId:\n    \"0x0000000000000000000000000000000000000000000000000000000000000006\",\n  mutable: false,\n  initialSharedVersion: 1,\n};\n\nexport const TREASURY_OBJ = {\n  objectId:\n    \"0x81f525f4fa5b2d3cf58677d3e39aabc4b0a1ca25cbba605033cfe417e47b0a16\",\n  mutable: true,\n  initialSharedVersion: 22329876,\n};\n\nexport type VaultObjectInfo = {\n  // symbol: COIN;\n  priceAggregater: SharedObjectRef;\n  vault: SharedObjectRef;\n  pythPriceId?: string;\n};\n\nexport const VAULT_MAP: Record<COLLATERAL_COIN, VaultObjectInfo> = {\n  IOTA: {\n    priceAggregater: {\n      objectId:\n        \"0x052c40b4e8f16df5238457f3a7b3b0eeaa49c6bc8acc22f6a7790ab32495b2c6\",\n      mutable: false,\n      initialSharedVersion: 22329880,\n    },\n    vault: {\n      objectId:\n        \"0xaf306be8419cf059642acdba3b4e79a5ae893101ae62c8331cefede779ef48d5\",\n      mutable: true,\n      initialSharedVersion: 22329895,\n    },\n    pythPriceId:\n      \"0xc7b72e5d860034288c9335d4d325da4272fe50c92ab72249d58f6cbba30e4c44\",\n  },\n  stIOTA: {\n    priceAggregater: {\n      objectId:\n        \"0x8c730f64aa369eed69ddf7eea39c78bf0afd3f9fbb4ee0dfe457f6dea5a0f4ed\",\n      mutable: false,\n      initialSharedVersion: 22329881,\n    },\n    vault: {\n      objectId:\n        \"0xc9cb494657425f350af0948b8509efdd621626922e9337fd65eb161ec33de259\",\n      mutable: true,\n      initialSharedVersion: 22329896,\n    },\n  },\n};\n\nexport const PYTH_STATE_ID =\n  \"0x6bc33855c7675e006f55609f61eebb1c8a104d8973a698ee9efd3127c210b37f\";\nexport const WORMHOLE_STATE_ID =\n  \"0xd43b448afc9dd01deb18273ec39d8f27ddd4dd46b0922383874331771b70df73\";\nexport const PYTH_RULE_PACKAGE_ID =\n  \"0xed5a8dac2ca41ae9bdc1c7f778b0949d3e26c18c51ed284c4cfa4030d0bb64c2\";\nexport const PYTH_RULE_CONFIG_OBJ: SharedObjectRef = {\n  objectId:\n    \"0xbcc4f6e3ca3d4a83eac39282ab7d1cb086924c58bef825d69c33b00fea1105b8\",\n  initialSharedVersion: 22329882,\n  mutable: false,\n};\n// export const STABILITY_POOL_OBJ: SharedObjectRef = {\n//   objectId:\n//     \"0x963b3d757dcd5ad14773a503eb481143b64d3686aebdf6a90443d908582188e0\",\n//   initialSharedVersion: 252695564,\n//   mutable: true,\n// };\n","import { COIN, COLLATERAL_COIN } from \"@/types\";\nimport { COINS_TYPE_LIST, ORIGINAL_ORACLE_PACKAGE_ID } from \"@/constants\";\nimport { normalizeIotaAddress } from \"@iota/iota-sdk/utils\";\n\nexport function getObjectNames(objectTypes: string[]) {\n  const accept_coin_type = Object.values(COINS_TYPE_LIST);\n  const accept_coin_name = Object.keys(COINS_TYPE_LIST);\n\n  const coinTypeList = objectTypes.map(\n    (type) => type.split(\"<\").pop()?.replace(\">\", \"\") ?? \"\",\n  );\n\n  const objectNameList: string[] = [];\n\n  coinTypeList.forEach((type) => {\n    const typeIndex = accept_coin_type.indexOf(type);\n    const coinName = accept_coin_name[typeIndex];\n    objectNameList.push(coinName ?? \"\");\n  });\n\n  return objectNameList;\n}\n\nexport const getCoinType = (str: string) => {\n  const startIndex = str.indexOf(\"<\");\n  const endIndex = str.lastIndexOf(\">\");\n\n  if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {\n    const coinType = str.slice(startIndex + 1, endIndex);\n    return coinType === \"0x2::iota::IOTA\" ? COINS_TYPE_LIST.IOTA : coinType;\n  }\n\n  return null;\n};\n\nexport const getCoinSymbol = (coinType: string) => {\n  const coin = Object.keys(COINS_TYPE_LIST).find(\n    (key) =>\n      normalizeIotaAddress(COINS_TYPE_LIST[key as COIN]) ===\n      normalizeIotaAddress(coinType),\n  );\n  if (coin) {\n    return coin as COIN;\n  }\n  return undefined;\n};\n\nexport function U64FromBytes(x: number[]) {\n  let u64 = BigInt(0);\n  for (let i = x.length - 1; i >= 0; i--) {\n    u64 = (u64 << BigInt(8)) | BigInt(x[i] ?? 0);\n  }\n  return u64;\n}\n\nexport const formatUnits = (value: bigint, decimals: number) => {\n  let display = value.toString();\n\n  const negative = display.startsWith(\"-\");\n  if (negative) display = display.slice(1);\n\n  display = display.padStart(decimals, \"0\");\n\n  const integer = display.slice(0, display.length - decimals);\n  let fraction = display.slice(display.length - decimals);\n\n  fraction = fraction.replace(/(0+)$/, \"\");\n  return `${negative ? \"-\" : \"\"}${integer || \"0\"}${\n    fraction ? `.${fraction}` : \"\"\n  }`;\n};\n\nexport const formatBigInt = (value: string, decimals: number = 9) => {\n  const formatted = formatUnits(BigInt(value), decimals);\n  return Number(formatted);\n};\n\nexport const parseUnits = (value: number | string, decimals: number) => {\n  let [integer, fraction = \"0\"] =\n    typeof value == \"string\" ? value.split(\".\") : value.toString().split(\".\");\n\n  if (integer === undefined) {\n    return BigInt(0);\n  }\n  const negative = integer.startsWith(\"-\");\n  if (negative) integer = integer.slice(1);\n\n  // trim leading zeros.\n  fraction = fraction.replace(/(0+)$/, \"\");\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    integer = `${Math.round(Number(`${integer}.${fraction}`))}`;\n    fraction = \"\";\n  } else if (fraction.length > decimals) {\n    const [before, after] = [\n      fraction.slice(0, decimals),\n      fraction.slice(decimals),\n    ];\n    fraction = `${\n      /^0+$/.test(before) ? before.slice(0, before.length - 1) : \"\"\n    }${Math.round(Number(`${before}.${after}`))}`;\n  } else {\n    fraction = fraction.padEnd(decimals, \"0\");\n  }\n\n  return BigInt(`${negative ? \"-\" : \"\"}${integer}${fraction}`);\n};\n\nexport const getPriceResultType = (coinSymbol: COLLATERAL_COIN): string => {\n  return `${ORIGINAL_ORACLE_PACKAGE_ID}::result::PriceResult<${COINS_TYPE_LIST[coinSymbol]}>`;\n};\n","import { IotaClient } from \"@iota/iota-sdk/client\";\nimport {\n  Transaction,\n  TransactionArgument,\n  TransactionResult,\n} from \"@iota/iota-sdk/transactions\";\n\nimport { COINS_TYPE_LIST } from \"@/constants\";\n\nexport function coinIntoBalance(\n  tx: Transaction,\n  coinType: string,\n  coinInput: TransactionArgument | undefined,\n): TransactionResult {\n  if (coinInput) {\n    return tx.moveCall({\n      target: \"0x2::coin::into_balance\",\n      typeArguments: [coinType],\n      arguments: [coinInput],\n    });\n  } else {\n    return tx.moveCall({\n      target: \"0x2::balance::zero\",\n      typeArguments: [coinType],\n    });\n  }\n}\n\nexport function coinFromBalance(\n  tx: Transaction,\n  coinType: string,\n  balanceInput: TransactionArgument,\n): TransactionResult {\n  return tx.moveCall({\n    target: \"0x2::coin::from_balance\",\n    typeArguments: [coinType],\n    arguments: [balanceInput],\n  });\n}\n\nexport async function getInputCoins(\n  tx: Transaction,\n  client: IotaClient,\n  owner: string,\n  coinType: string,\n  ...amounts: string[]\n) {\n  let isZero = true;\n  for (const amount of amounts) {\n    if (Number(amount) > 0) {\n      isZero = false;\n      break;\n    }\n  }\n\n  if (isZero) {\n    return tx.moveCall({\n      target: `0x2::coin::zero`,\n      typeArguments: [coinType],\n    });\n  }\n\n  if (coinType === COINS_TYPE_LIST.IOTA) {\n    return tx.splitCoins(\n      tx.gas,\n      amounts.map((amount) => tx.pure.u64(amount)),\n    );\n  } else {\n    const { data: userCoins } = await client.getCoins({ owner, coinType });\n    const [mainCoin, ...otherCoins] = userCoins.map((coin) =>\n      tx.objectRef({\n        objectId: coin.coinObjectId,\n        version: coin.version,\n        digest: coin.digest,\n      }),\n    );\n    if (!mainCoin) {\n      return tx.moveCall({\n        target: `0x2::coin::zero`,\n        typeArguments: [coinType],\n      });\n    }\n\n    if (otherCoins.length > 0) tx.mergeCoins(mainCoin, otherCoins);\n\n    return tx.splitCoins(\n      mainCoin,\n      amounts.map((amount) => tx.pure.u64(amount)),\n    );\n  }\n}\n\nexport async function getMainCoin(\n  tx: Transaction,\n  client: IotaClient,\n  owner: string,\n  coinType: string,\n) {\n  if (coinType === COINS_TYPE_LIST.IOTA) {\n    return undefined;\n  }\n\n  const { data: userCoins } = await client.getCoins({ owner, coinType });\n  const [mainCoin, ...otherCoins] = userCoins.map((coin) =>\n    tx.objectRef({\n      objectId: coin.coinObjectId,\n      version: coin.version,\n      digest: coin.digest,\n    }),\n  );\n  if (!mainCoin) {\n    return tx.moveCall({\n      target: `0x2::coin::zero`,\n      typeArguments: [coinType],\n    });\n  }\n\n  if (otherCoins.length > 0) tx.mergeCoins(mainCoin, otherCoins);\n  return mainCoin;\n}\n","import {\n  IotaMoveObject,\n  IotaObjectData,\n  IotaObjectResponse,\n  IotaParsedData,\n} from \"@iota/iota-sdk/client\";\nimport type { Infer } from \"superstruct\";\nimport { any, record, string } from \"superstruct\";\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport interface IotaObjectDataWithContent extends IotaObjectData {\n  content: IotaParsedData;\n}\n\nfunction isIotaObjectDataWithContent(\n  data: IotaObjectData,\n): data is IotaObjectDataWithContent {\n  return data.content !== undefined;\n}\n\nexport function getIotaObjectData(\n  resp: IotaObjectResponse,\n): IotaObjectData | null | undefined {\n  return resp.data;\n}\n\nexport function getMoveObject(\n  data: IotaObjectResponse | IotaObjectData,\n): IotaMoveObject | undefined {\n  const obj =\n    \"data\" in data ? getIotaObjectData(data) : (data as IotaObjectData);\n\n  if (\n    !obj ||\n    !isIotaObjectDataWithContent(obj) ||\n    obj.content.dataType !== \"moveObject\"\n  ) {\n    return undefined;\n  }\n\n  return obj.content as IotaMoveObject;\n}\n\nexport function getObjectFields(\n  resp: IotaObjectResponse | IotaMoveObject | IotaObjectData,\n): ObjectContentFields | undefined {\n  if (\"fields\" in resp) {\n    return resp.fields;\n  }\n\n  return getMoveObject(resp)?.fields;\n}\n\nexport const getObjectGenerics = (resp: IotaObjectResponse): string[] => {\n  const objType = resp.data?.type;\n\n  const startIdx = objType?.indexOf?.(\"<\");\n  const endIdx = objType?.lastIndexOf?.(\">\");\n\n  return startIdx ? objType!.slice(startIdx + 1, endIdx).split(\", \") : [];\n};\n","import {\n  COLLATERAL_COIN,\n  // PositionInfo,\n  // PositionResponse,\n  // StabilityPoolInfo,\n  // StabilityPoolResponse,\n  VaultInfo,\n  VaultResponse,\n} from \"@/types\";\nimport { formatBigInt } from \"./format\";\n\n// Convert response into vault object\nexport const parseVaultObject = (\n  coinSymbol: COLLATERAL_COIN,\n  fields: VaultResponse,\n): VaultInfo => {\n  return {\n    token: coinSymbol,\n    positionTableSize: fields.position_table.fields.size,\n    collateralDecimal: Number(fields.decimal),\n    collateralBalance: fields.balance,\n    supply: fields.limited_supply.fields.supply,\n    maxSupply: fields.limited_supply.fields.limit,\n    interestRate: formatBigInt(fields.interest_rate.fields.value, 18),\n    minCollateralRatio: formatBigInt(fields.min_collateral_ratio.fields.value),\n  };\n};\n\n// Convert response into position object\n// export const parsePositionObject = (\n//   resp: PositionResponse,\n// ): PositionInfo | undefined => {\n//   const collateral = getCoinSymbol(getCoinType(resp.type) ?? \"\");\n//   if (!collateral) {\n//     return;\n//   }\n\n//   return {\n//     collateral: collateral as COLLATERAL_COIN,\n//     collAmount: resp.fields.coll_amount,\n//     debtAmount: (\n//       BigInt(resp.fields.debt_amount) + BigInt(resp.fields.interest_buffer)\n//     ).toString(),\n//   };\n// };\n\n// export const parseStabilityPoolObject = (\n//   fields: StabilityPoolResponse,\n// ): StabilityPoolInfo => {\n//   return {\n//     vusdBalance: formatBigInt(fields.balance, COIN_DECIMALS.VUSD),\n//   };\n// };\n","import { Transaction } from \"@iota/iota-sdk/transactions\";\nimport { COINS_TYPE_LIST } from \"@/constants\";\nimport { VirtueClient } from \"@/client\";\nimport { COLLATERAL_COIN } from \"@/types\";\nimport { getInputCoins } from \"@/utils\";\n// import { IotaObjectData } from \"@iota/iota-sdk/dist/cjs/client\";\n\n/* ----- Manage Position Builder ----- */\nexport async function buildManagePositionTx(\n  client: VirtueClient,\n  tx: Transaction,\n  sender: string,\n  collateralSymbol: COLLATERAL_COIN,\n  collateralAmount: string,\n  borrowAmount: string,\n  repaymentAmount: string,\n  withdrawAmount: string,\n  accountObjId?: string,\n  recipient?: string,\n) {\n  const iotaClient = client.getClient();\n  const coinType = COINS_TYPE_LIST[collateralSymbol];\n  const [depositCoin] = await getInputCoins(\n    tx,\n    iotaClient,\n    sender,\n    coinType,\n    collateralAmount,\n  );\n  const [repaymentCoin] = await getInputCoins(\n    tx,\n    iotaClient,\n    sender,\n    COINS_TYPE_LIST.VUSD,\n    repaymentAmount,\n  );\n  const [priceResult] =\n    Number(borrowAmount) > 0 || Number(withdrawAmount) > 0\n      ? await client.aggregatePrice(tx, collateralSymbol)\n      : [undefined];\n  const [manageRequest] = client.debtorRequest(tx, {\n    collateralSymbol,\n    depositCoin,\n    borrowAmount,\n    repaymentCoin,\n    withdrawAmount,\n    accountObj: accountObjId,\n  });\n  const [collCoin, vusdCoin] = client.updatePosition(tx, {\n    collateralSymbol,\n    manageRequest,\n    priceResult,\n  });\n  if (recipient === \"StabilityPool\") {\n    // TODO: integrate StabilityPool\n    // client.depositStabilityPool(tx, vusdCoin);\n    // tx.transferObjects([collCoin], recipient ?? sender);\n    tx.transferObjects([collCoin, vusdCoin], recipient ?? sender);\n  } else {\n    tx.transferObjects([collCoin, vusdCoin], recipient ?? sender);\n  }\n}\n\n// export async function buildDepositStabilityPoolTx(\n//   client: VirtueClient,\n//   tx: Transaction,\n//   sender: string,\n//   vusdAmount: string,\n//   recipient?: string,\n// ) {\n//   const iotaClient = client.getClient();\n//   const [inputCoin] = await getInputCoins(\n//     tx,\n//     iotaClient,\n//     sender,\n//     COINS_TYPE_LIST.VUSD,\n//     vusdAmount,\n//   );\n//   const [token] = client.depositStabilityPool(tx, inputCoin);\n//   tx.transferObjects([token], recipient ?? sender);\n// }\n\n// export async function buildWithdrawStabilityPoolTx(\n//   client: VirtueClient,\n//   tx: Transaction,\n//   sender: string,\n//   vusdAmount: string,\n//   recipient?: string,\n// ): Promise<boolean> {\n//   const iotaClient = client.getClient();\n//   const tokensRes = await iotaClient.getOwnedObjects({\n//     owner: sender,\n//     filter: {\n//       StructType: `${ORIGINAL_LIQUIDATION_PACKAGE_ID}::stablility_pool::StabilityToken`,\n//     },\n//   });\n//   if (tokensRes.data) {\n//     const tokens = tokensRes.data.map((token) =>\n//       tx.objectRef(token.data as IotaObjectData),\n//     );\n//     const [coin, token] = client.withdrawStabilityPool(tx, tokens, vusdAmount);\n//     tx.transferObjects([coin, token], recipient ?? sender);\n//     return true;\n//   } else {\n//     return false;\n//   }\n// }\n"],"mappings":"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","names":[]}